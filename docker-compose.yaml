version: '3.8'

x-airflow-common:
  &airflow-common
  image: airflow:dev_config
  env_file:
    - .env.airflow  # Airflow-specific environment variables
  environment:
    - AIRFLOW_HOME=/opt/airflow
  user: "${AIRFLOW_UID:-50000}:0"
  volumes:
    - ./dags:/opt/airflow/dags
    - ./logs:/opt/airflow/logs
    - ./plugins:/opt/airflow/plugins
    - ./data:/opt/airflow/data
    - ./models:/opt/airflow/models
    - ./config:/opt/airflow/config
  depends_on:
    redis:
      condition: service_healthy
    postgres:
      condition: service_healthy
  networks:
    - airflow-network

services:
  airflow-webserver:
    <<: *airflow-common
    command: webserver
    container_name: airflow-webserver
    ports:
      - "8080:8080"
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
      interval: 60s
      timeout: 10s
      retries: 3
      start_period: 10s
    restart: always
    depends_on:
      airflow-init:
        condition: service_completed_successfully
    networks:
      - airflow-network

  airflow-scheduler:
    <<: *airflow-common
    command: scheduler
    container_name: airflow-scheduler
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8793/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    restart: always
    depends_on:
      airflow-init:
        condition: service_completed_successfully
    networks:
      - airflow-network

  airflow-worker:
    <<: *airflow-common
    command: celery worker
    container_name: airflow-worker
    healthcheck:
      test:
        - "CMD-SHELL"
        - 'celery --app airflow.executors.celery_executor.app inspect ping -d "celery@$${HOSTNAME}" || celery --app airflow.providers.celery.executors.celery_executor.app inspect ping -d "celery@$${HOSTNAME}"'
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    environment:
      DUMB_INIT_SETSID: "0"
    restart: always
    depends_on:
      airflow-init:
        condition: service_completed_successfully
    networks:
      - airflow-network

  airflow-triggerer:
    <<: *airflow-common
    command: triggerer
    container_name: airflow-triggerer
    healthcheck:
      test: ["CMD-SHELL", 'airflow jobs check --job-type TriggererJob --hostname "$${HOSTNAME}"']
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    restart: always
    depends_on:
      airflow-init:
        condition: service_completed_successfully
    networks:
      - airflow-network  

  airflow-init:
    image: airflow:dev_config
    container_name: airflow-init
    entrypoint: /bin/bash
    command:
      - -c
      - |
        mkdir -p /opt/airflow/{logs,dags,plugins,data}
        chown -R ${AIRFLOW_UID:-50000}:0 /opt/airflow/{logs,dags,plugins,data}
        pip list && \
        airflow db migrate && \
        airflow users create \
          --username airflow \
          --password airflow \
          --firstname Airflow \
          --lastname Admin \
          --role Admin \
          --email admin@example.com
    user: 'airflow'
    env_file:
      - .env.airflow  # Airflow-specific environment variables
    networks:
      - airflow-network

  postgres:
    image: postgres:13
    container_name: postgres
    env_file:
      - .env  # PostgreSQL-specific environment variables
    environment:
      POSTGRES_USER: ${DATA_POSTGRES_USER}
      POSTGRES_PASSWORD: ${DATA_POSTGRES_PASSWORD}
      POSTGRES_DB: ${DATA_POSTGRES_DB}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts:/docker-entrypoint-initdb.d  # SQL initialization scripts
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "${DATA_POSTGRES_USER}"]
      interval: 10s
      retries: 3
      start_period: 5s
    restart: always
    ports:
      - "5432:5432"
    networks:
      - airflow-network

  redis:
    image: redis:7.2-bookworm
    container_name: airflow-redis
    expose:
      - 6379
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 30s
      retries: 10
      start_period: 30s
    restart: always
    networks:
      - airflow-network

  flower:
    <<: *airflow-common
    command: celery flower --broker=redis://airflow-redis:6379/0
    container_name: airflow-flower
    ports:
      - "5555:5555"
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:5555/"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      airflow-init:
        condition: service_completed_successfully

networks:
  airflow-network:
    driver: bridge

volumes:
  postgres_data:

